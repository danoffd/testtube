(function (a) { a.TileView = Backbone.View.extend({ className: "tile", initialize: function () { var b = this, c; b.template = JST[b.className], b.selector = b.model.get("selector"); b.model.bind("change:isLoaded", b.render, b); c = b.selector.get("length") * a.W_DATE + a.W_SPACER * 2; b.$el.css({ left: b.model.id * (c - a.W_SPACER) + "px", width: c + "px" }); return }, render: function () { var b = this, d = b.model.get("doctors"), c; typeof b.model.get("dates") !== "undefined" && b.model.get("dates").length > 0 && b.$el.attr({ "data-test": b.className + "-" + b.model.get("dates")[0].date }); b.$el.html(b.template.render(b.model.toJSON())); if (!d) return b; c = b.$("." + b.className + "-row-collection"); d.each(function (b) { c.append(new a.TileRowView({ model: b }).render().el) }); return b } }) })(ZD.module("ui-appointments")); (function (a) { a.HeaderTileView = a.TileView.extend({ className: "header-tile", render: function () { var a = this; a.$el.html(a.template.render(a.model.toJSON())); return a } }) })(ZD.module("ui-appointments")); (function (d) { var c = ZD.module("api-appointments"), b = "h:mm a", a = "ddd, MMM D"; d.Appointment = Backbone.Model.extend({ initialize: function () { var e = this, g = moment.utc(e.get("date"), c.DATE_FORMAT_FULL), f, d; e.set({ moment: g, time: g.format(b), dateShort: g.format(a) }); if (!e.collection || !e.collection.selector) return; f = e.collection.selector.get("appointment_url_params"); if (!f) return; d = e.get("url"); _.each(f, function (b, f) { var a = f.toLowerCase(), c = new RegExp("([?|&])" + a + "=.*?(&|$)", "i"), e = d.indexOf("?") !== -1 ? "&" : "?"; if (d.match(c)) d = d.replace(c, "$1" + a + "=" + b + "$2"); else d = d + e + a + "=" + b }); e.set({ url: d }); return }, hasConstraints: function () { return !!this.get("constraint") }, select: function () { var a = this; a.set({ isSelected: true }); return }, deselect: function () { var a = this; a.set({ isSelected: false }); return } }) })(ZD.module("ui-appointments")); (function (c) { var a = { open: "open", closed: "closed", verifying: "verifying" }, b = ZD.module("api-appointments"); c.AppointmentField = Backbone.Model.extend({ defaults: { state: a.closed, is_verified: false, hidePointer: false }, initialize: function () { var a = this; _.bindAll(a, "verifyResponse"); a.selector = new c.Selector({ is_patient_existing: a.get("is_patient_existing"), procedure_id: a.get("procedure_id"), focus: a.get("focus"), client: new b.Client({ doctor_location_id: a.get("doctor_location_id") }), isExpandable: true, length: 5 }); a.bind("change:is_patient_existing change:procedure_id", a.verify, a); a.selector.get("appointments").bind("change:isSelected", a.selectAppointment, a).bind("add", a.onAdd, a); return }, verify: function () { var c = this; c.set({ is_verified: false, state: a.verifying }); c.xhr && c.xhr.abort(); c.xhr = b.fetch_doctor_location(c.get("doctor_location_id"), { data: { length: 1, start: c.get("appointment").get("date"), is_patient_existing: c.get("is_patient_existing"), procedure_id: c.get("procedure_id") } }).then(c.verifyResponse); return }, verifyResponse: function (c) { var b = this, a = c.doctor_locations; if (!_.isArray(a) || !a[0] || !a[0].dates || !a[0].dates[0] || !a[0].dates[0].appointments || !_.find(a[0].dates[0].appointments, function (a) { return a.id === b.get("appointment").id })) { b.set({ is_verified: false }).open(); return } b.set({ is_verified: true }).close(); return }, onAdd: function (b) { var c = this, a = c.get("appointment"); if (!a || b.id !== a.id) return; b.set({ isSelected: true }); return }, open: function () { var b = this; b.set({ state: a.open }); b.selector.set({ is_patient_existing: b.get("is_patient_existing"), procedure_id: b.get("procedure_id") }).buffer(); return }, close: function () { var b = this; b.set({ state: a.closed }); b.get("field").set({ message: null }); return }, isOpen: function () { return this.get("state") === a.open }, isVerifying: function () { return this.get("state") === a.verifying }, isVerified: function () { return !!this.get("is_verified") }, selectAppointment: function (a, d) { if (!d) return; var b = this, c = b.selector.get("appointments"); c.each(function (b) { if (b === a) return; b.set({ isSelected: false }) }); b.set({ is_verified: true, appointment: a }); return }, selectInitial: function (b) { var a = this, c = a.get("appointment"), d = c ? c.id : a.get("appointmentId"); if (b.id !== d) return; b.set({ isSelected: true }, { silent: true }); a.set({ appointment: b }); return } }) })(ZD.module("ui-appointments")); (function (a) { a.Appointments = Backbone.Collection.extend({ model: a.Appointment, initialize: function (d, b) { var c = this; if (b instanceof a.Selector) c.selector = b; return } }) })(ZD.module("ui-appointments")); (function (a) { a.Doctor = Backbone.Model.extend({}) })(ZD.module("ui-appointments")); (function (a) { a.Doctors = Backbone.Collection.extend({ model: a.Doctor }) })(ZD.module("ui-appointments")); (function (a) { a.Location = Backbone.Model.extend({ initialize: function (d, c) { var a = this, b; if (_.isUndefined(c) || _.isUndefined(c.client)) throw new Error("Location requires API client."); a.client = c.client; a.clear({ silent: true }).set(a.parse(d)); b = a.get("selector"); b.addTiles(d); b.buffer(); return }, parse: function (d) { var h = this, b = _.filter(d.doctor_locations, function (a) { return a.location.id === d.doctor_locations[0].location.id }), f = _.uniq(_.pluck(b, "doctor"), false, function (a) { return a.id }), c = _.uniq(_.flatten(_.union(_.pluck(f, "procedures"))), false, function (a) { return a.id }), e = new a.Selector({ client: h.client }), g = e.get("rows"); c.splice(0, 0, { name: i18n.t("UiAppointments_Templates.AnyProcedure"), id: -1 }); return { location: _.first(_.pluck(b, "location")), doctors: new a.Doctors(f), procedures: c, selector: e, rows: g } } }) })(ZD.module("ui-appointments")); (function (a) { a.Row = Backbone.Model.extend({ defaults: { isExpanded: false, maxMoreAppointmentsPerDate: 0 }, setMaxMoreAppointmentsPerDate: function (b) { var a = this, c = a.get("maxMoreAppointmentsPerDate"); if (b <= c) return; a.set({ maxMoreAppointmentsPerDate: b }); return } }) })(ZD.module("ui-appointments")); (function (a) { a.Rows = Backbone.Collection.extend({ model: a.Row }) })(ZD.module("ui-appointments")); (function (a) { var b = ZD.module("api-appointments"); a.Selector = Backbone.Model.extend({ defaults: { index: 0, initialAppointmentCount: 6, focus: b.TODAY, length: 7, buffer: 2, procedure_id: -1, isExpandable: false }, initialize: function () { var b = this; _.bindAll(b, "addTileAtIndex"); if (_.isUndefined(b.get("client"))) throw new Error("Selector requires API client."); b.tiles = new a.Tiles; b.doctors = new a.Doctors; b.set({ index: b.getIndex(b.get("focus")), rows: new a.Rows, appointments: new a.Appointments }); b.bind("change:procedure_id change:is_patient_existing", b.reset, b); b.get("rows").bind("focus", b.changeFocus, b); return }, prev: function () { var a = this, c = a.get("index") - 1, b = a.tiles.get(c); if (_.isUndefined(b) || !b.get("isLoaded")) return; a.changeIndex(c); return }, next: function () { var a = this, c = a.get("index") + 1, b = a.tiles.get(c); if (_.isUndefined(b) || !b.get("isLoaded")) return; a.changeIndex(c); return }, buffer: function () { var a = this, b = a.get("index"); _.each(_.range(b - a.get("buffer"), b + 1 + a.get("buffer")), a.addTileAtIndex); return }, changeIndex: function (b) { var a = this; a.set({ index: b }); a.buffer(); return }, changeFocus: function (b) { var a = this; a.changeIndex(a.getIndex(b)); return }, getIndex: function (d) { var c = this, a = new moment(d).sod(); return Math.floor(a.diff(b.TODAY, "days") / c.get("length")) }, getCurrentFocus: function () { var a = this, c = a.get("index") * a.get("length"); return moment(b.TODAY).add("days", c).format(b.DATE_FORMAT) }, addTiles: function (h) { var b = this, c = h.doctor_locations, d, g, f, e; if (!_.isArray(c) || c.length < 1) return; d = c[0].dates; g = moment(d[0].date); f = Math.floor(d.length / b.get("length")), e = b.getIndex(g); _.each(_.range(e, e + f), function (e) { var d = new a.Tile({ id: e, isLoaded: true, selector: b, rows: b.get("rows") }); d.parseClientResponse(_.map(c, function (a) { return _.extend({}, a, { dates: a.dates }) })); b.tiles.add(d) }); return }, addTileAtIndex: function (d) { var b = this, c = b.tiles.get(d); if (c) return c; if (d < 0) return; c = new a.Tile({ id: d, isLoaded: false, selector: b, rows: b.get("rows") }); b.tiles.add(c); b.loadTileAtIndex(d); return c }, loadTileAtIndex: function (e) { var a = this, g, f, c = a.tiles.get(e), h = a.get("client"), d; if (!c || c.get("hasLoadFailed")) return; g = e * a.get("length"); f = moment(b.TODAY).add("days", g); d = { start: f.format(b.DATE_FORMAT), length: a.get("length"), procedure_id: a.get("procedure_id") }; if (a.get("is_patient_existing")) d.is_patient_existing = a.get("is_patient_existing"); h.fetch({ data: d }).then(function (a) { c.parseClientResponse(a.doctor_locations) }).fail(function (b) { if (b.status === 450) { a.trigger("isLockedForService"); return } else if (b.status !== 400 && b.status !== 500) return; a.loadTileAtIndex(e); c.set({ hasLoadFailed: true }) }); return }, reset: function () { var a = this, b = a.get("appointments"); a.tiles.reset(); b && b.reset(); a.buffer(); return } }) })(ZD.module("ui-appointments")); (function (a) { var b = moment([1982, 10, 22]); a.Tile = Backbone.Model.extend({ parseClientResponse: function (f) { var e = this, g = e.get("rows"), c = e.get("selector"), d = c.get("initialAppointmentCount"), h = c.get("isExpandable"), i = (i18n.t("Shared.DateTimeFormatting.NumericMonthNumericDayShortYear") || "MM-DD-YY").toUpperCase(); e.set({ dates: _.map(f[0].dates, function (c) { var a = moment(c.date); return { name: a.format("ddd"), date: a.format(i), isOdd: b.diff(a, "days") % 2 !== 0 } }), doctors: new a.Doctors(_.map(f, function (e) { var i = 0, j = c.get("appointments"), f, k; f = g.get(e.id); if (_.isUndefined(f)) { f = new a.Row({ id: e.id, isExpandable: h }); g.add(f) } k = _.map(e.dates, function (f) { var n = moment(f.date), l = f.appointments.length, h = f.appointments.slice(0), m = h.splice(0, d - 1), k = new a.Appointments(m, c), g = new a.Appointments(h, c); j && j.add(k.models.concat(g.models)); i = l > i ? l - d : i; return { id: e.id + "_" + f.date, hasMore: g.length > 0, isOdd: b.diff(n, "days") % 2 !== 0, appointments: k, appointmentsRest: g } }); f.setMaxMoreAppointmentsPerDate(i); return { id: e.id, url: e.doctor.url, row: f, hasAppointments: _.any(_.pluck(e.dates, "appointments"), function (a) { return a.length > 0 }), dates: k, hasBallparkAppointment: !_.isNull(e.next_appointment) || !_.isNull(e.previous_appointment), nextAppointment: e.next_appointment ? new a.Appointment(e.next_appointment) : null, previousAppointment: e.previous_appointment ? new a.Appointment(e.previous_appointment) : null, initialAppointmentCount: d } })), isLoaded: true }); return } }) })(ZD.module("ui-appointments")); (function (a) { a.Tiles = Backbone.Collection.extend({ model: a.Tile, comparator: function (a) { return a.id } }) })(ZD.module("ui-appointments")); (function (e) { var a = "appointment-field", c = ZD.module("ui"), d = ZD.module("ui-appointments"), b = ZD.module("constraints"); e.AppointmentFieldView = Backbone.View.extend({ className: a, events: { "click .appointment-field-time": "open", "click a[href]": "clickLink" }, initialize: function () { var a = this; _.bindAll(a, "handleBodyClick", "constraint"); a.canClose = true; a.model.bind("change:state", a.render, a); $(document.body).bind("click." + a.cid, a.handleBodyClick); a.model.selector.get("appointments").bind("constraint", a.constraint); return }, render: function () { var b = this, i = "", f = a, e = b.model.get("appointment"), l = b.$("." + a + "-time"), h = b.$("input"), k = b.$("." + a + "-selector-pointer"), g = ""; if (e) { l.html(e.get("moment").format("dddd, MMMM D") + " - " + e.get("time").toUpperCase()); h.val(e.get("moment").ticks()) } else h.val(""); switch (b.model.get("state")) { case "verifying": f += " " + a + "-verifying"; break; case "open": f += " " + a + "-open"; i = new d.SelectorView({ model: b.model.selector }).render().el } b.$el.attr("class", f); b.$("." + a + "-selector").html(i); if (!b.model.isVerified() && !b.model.get("hidePointer")) { var j = b.model.get("pointerHideDescription") ? null : i18n.t("BookingAppointments_Templates.TimeNotAvailable"); g = new c.PointerView({ model: new c.Pointer({ icon: "clock", name: i18n.t("BookingAppointments_Templates.SelectANewTime"), description: j }) }).render().el } k.html(g); return b }, open: function () { var a = this; if (a.model.isVerifying()) return; a.model.open(); return }, clickLink: function (b) { b.preventDefault(); var a = this; if (!a.canClose || $(b.currentTarget).hasClass("tile-row-expander")) return; a.model.close(); return }, handleBodyClick: function (e) { var c = this, b, d; if (!c.model.isOpen()) return; b = $(e.target), d = b.attr("class") ? b.attr("class").replace(/^(\S*).*/, "$1") : false; if (b.closest(c.el).length > 0 || b.closest(".modal").length > 0 || b.get(0).tagName === "EM" && b.html() === c.$("." + a + "-time em").html() || d && c.$("." + d).length > 0 || !c.model.get("is_verified")) return; c.model.close(); return }, constraint: function (e, g) { var c = this, d = g.get("constraint"), f = c.model.get("doctor_name"), a; if (!b || d != 5) return; a = b.GetModal(d, { profName: f, href: "#" }); if (a) { e.preventDefault(); c.canClose = false; document.body.appendChild(a.render().el); a.$el.find(".-button-primary").click(function (b) { b.preventDefault(); a.close(); c.canClose = true; c.clickLink(e) }); a.$el.find(".-button-tertiary").click(function (b) { b.preventDefault(); a.close(); c.canClose = true }); a.center() } return } }) })(ZD.module("ui-appointments")); (function (c) { var a = "control", b = a + "-prev", d = a + "-next"; c.ControlView = Backbone.View.extend({ className: a, events: { "click .control-prev": "prev", "click .control-next": "next" }, initialize: function () { var a = this; a.template = JST[a.className]; a.selector = a.options.selector; a.selector.bind("change", a.render, a); a.selector.tiles.bind("change", a.render, a); return }, render: function () { var c = this, e = "", f = "", d = c.selector.get("index"); if (d === 0) e = b + "-disabled"; else if (c.selector.tiles.get(d - 1) && !c.selector.tiles.get(d - 1).get("isLoaded")) e = a + "-loading"; if (!c.selector.tiles.get(d + 1) || !c.selector.tiles.get(d + 1).get("isLoaded")) f = a + "-loading"; c.$el.html(c.template.render({ prevClass: e, nextClass: f })); return c }, prev: function (b) { b.preventDefault(); var a = this; a.selector.prev(); return }, next: function (b) { b.preventDefault(); var a = this; a.selector.next(); return } }) })(ZD.module("ui-appointments")); (function (a) { a.DoctorView = Backbone.View.extend({ className: "doctor", initialize: function () { var a = this; a.template = JST[a.className]; a.row = a.options.row; a.row.bind("change", a.updateHeight, a); return }, render: function () { var a = this; a.$el.html(a.template.render(a.model.toJSON())); return a }, updateHeight: function () { var a = this; a.$el.css({ height: a.row.get("height") + "px" }); return } }) })(ZD.module("ui-appointments")); (function (a) { var b = ZD.module("zd-form-inputs"); a.LocationView = Backbone.View.extend({ className: "location", events: { 'change [name = "procedure"]': "changeProcedure" }, initialize: function () { var a = this; a.template = JST[a.className]; a.$el.attr({ "data-test": "location-view" }); return }, render: function () { var c = this, f = c.model.get("rows"), e = c.model.get("doctors"), d; c.$el.html(c.template.render(c.model.toJSON())); d = c.$(".doctor-collection"); e.each(function (b) { d.append(new a.DoctorView({ model: b, row: f.find(function (a) { return a.id.split("_")[0] === "" + b.id }) }).render().el) }); c.$("." + c.className + "-selector-container").html(new a.SelectorView({ model: c.model.get("selector") }).render().el); c.$("." + c.className + "-procedure-container").html(new b.SelectView({ model: new Backbone.Model({ id: "procedure", selected: c.model.get("procedures")[0].name, options: c.model.get("procedures") }) }).render().el); return c }, changeProcedure: function (c) { var b = this, a = b.model.get("selector"); a.set({ procedure_id: c.currentTarget.value }); return } }) })(ZD.module("ui-appointments")); (function (a) { a.W_DATE = 68; a.W_SPACER = 30; a.H_ROW_PADDING = 6; a.H_ROW_BORDER = 1; a.H_APPOINTMENT = 18; a.SelectorView = Backbone.View.extend({ className: "selector", events: { "click .appointment-time ": "clickAppointment" }, initialize: function () { var a = this; _.bindAll(a, "renderTile", "bindHeader"); a.template = JST[a.className]; a.errorTemplate = JST["tile-error-message"]; a.updateWidth(); a.updateHeight(); a.model.bind("isLockedForService", a.renderError, a); a.model.bind("change:index", a.animateToIndex, a); a.model.tiles.bind("reset", a.render, a).bind("add", a.renderTile, a); a.model.get("rows").bind("change add", a.updateHeight, a); return }, renderError: function () { var a = this; a.isBookingUnavailable = true; a.render() }, render: function () { var b = this, c = b.getOffset(); if (b.isBookingUnavailable) { b.$el.empty().html(b.errorTemplate.render()); b.updateHeight(); return b } b.$el.html(b.template.render()); b.$header = b.$("." + b.className + "-header"); b.$header.append(new a.ControlView({ selector: b.model }).render().el); b.$tiles = b.$(".tile-collection"); b.$headerTiles = b.$(".header-tile-collection"); b.$tiles.css({ left: c + "px" }); b.$headerTiles.css({ left: c + "px" }); b.model.tiles.each(b.renderTile); return b }, renderTile: function (c) { var b = this; b.$tiles.append(new a.TileView({ model: c }).render().el); b.$headerTiles.append(new a.HeaderTileView({ model: c }).render().el); return }, bindHeader: function () { var a = this, b = $(window), d = a.$el.offset().top, c = "scroll." + a.cid; a.positionHeader(b, d); b.unbind(c).bind(c, function () { a.positionHeader(b, d) }); return }, positionHeader: function (f, e) { var a = this, d = f.scrollTop(), b = 0, c = "selector-header-overlap"; if (d > e) { b = d - e; a.$header.addClass(c) } else a.$header.removeClass(c); a.$header.css({ top: b + "px" }); return }, animateToIndex: function () { var a = this, b = 600, c = a.getOffset(); a.$tiles.stop(true).animate({ left: c + "px" }, b); a.$headerTiles.stop(true).animate({ left: c + "px" }, b); return }, updateWidth: function () { var b = this, c = b.model.get("length") * a.W_DATE; b.$el.css({ width: c + "px" }); return }, updateHeight: function () { var b = this, d = b.model.get("rows"), c = 37; d.each(function (d) { c += a.H_APPOINTMENT * b.model.get("initialAppointmentCount") + a.H_ROW_PADDING + a.H_ROW_BORDER; if (!d.get("isExpanded")) return; c += a.H_APPOINTMENT * d.get("maxMoreAppointmentsPerDate") }); if (b.isBookingUnavailable) c = 150; b.$el.css({ height: c + "px" }); return }, getOffset: function () { var b = this; return -b.model.get("index") * (a.W_SPACER + a.W_DATE * b.model.get("length")) }, clickAppointment: function (b) { var d = this, c = d.model.get("appointments"), e = b.currentTarget.getAttribute("data-id"), a = c.get(e); if (!a) return; a.select(); a.hasConstraints() && a.trigger("constraint", b, a); return } }) })(ZD.module("ui-appointments")); (function (b) { var a = "tile-row-empty"; b.TileRowEmptyView = Backbone.View.extend({ className: a, events: { "click .tile-row-empty-next": "clickNext", "click .tile-row-empty-prev": "clickPrevious" }, initialize: function () { var a = this; a.template = JST[a.className]; return }, render: function () { var a = this, b = { hasBallparkAppointment: a.model.get("hasBallparkAppointment") }; a.model.get("nextAppointment") && _.extend(b, { nextAppointment: _.format(i18n.t("UiAppointments_Templates.NextDate"), a.model.get("nextAppointment").get("dateShort")) }); a.$el.html(a.template.render(b)); return a }, clickNext: function () { var a = this; a.model.get("row").trigger("focus", a.model.get("nextAppointment").get("moment")); return }, clickPrevious: function () { var a = this; a.model.get("row").trigger("focus", a.model.get("previousAppointment").get("moment")); return } }) })(ZD.module("ui-appointments")); (function (a) { var b = "tile-row", c = b + "-expanded"; a.TileRowView = Backbone.View.extend({ className: b, events: { "click .tile-row-expander": "clickExpand" }, initialize: function () { var a = this, b = a.model.get("row"); a.template = JST[a.className]; b.bind("change:isExpanded", a.expand, a).bind("change:maxMoreAppointmentsPerDate", a.updateHeight, a); b.get("isExpanded") && a.expand(); a.updateHeight(); return }, render: function () { var a = this; if (!a.model.get("hasAppointments")) a._renderEmptyRow(); else a._renderTileRow(); return a }, _renderTileRow: function () { var a = this; a.$el.html(a.template.render(_.extend(a.model.toJSON(), { dates: _.map(a.model.get("dates"), function (a) { return _.extend({}, a, { appointments: a.appointments.toJSON(), appointmentsRest: a.appointmentsRest.toJSON() }) }) }))) }, _renderEmptyRow: function () { var b = this; b.$el.append(new a.TileRowEmptyView({ model: b.model }).render().el) }, clickExpand: function (b) { var a = this; if (!a.model.get("row").get("isExpandable")) return; b.preventDefault(); a.expand(); return }, expand: function () { var a = this, b = a.model.get("row"); b.set({ isExpanded: true }); a.$el.addClass(c); a.updateHeight(); return }, updateHeight: function () { var b = this, c = b.model.get("row"), d = a.H_APPOINTMENT * b.model.get("initialAppointmentCount") + a.H_ROW_PADDING; if (c.get("isExpanded")) d += a.H_APPOINTMENT * c.get("maxMoreAppointmentsPerDate"); b.$el.css({ height: d + "px" }); c.set({ height: d }); return } }) })(ZD.module("ui-appointments"))
